extends layout.pug
block content
    h1 D.2 | Soil Data Mapping and Parameter Initialization
    div.info.blue-light-1
        p Overview (Tutorial D.2 - Soil Data Mapping and Parameter Initialization)
        p This tutorial describes the minimum data input files required to run the VELMA simulator, where to acquire them, and steps to prepare them for a VELMA simulation.
        
    h2 Soil Data Sources
    ul 
        li <a href="https://gdg.sc.egov.usda.gov/">gSSURGO</a>
            ul 
                li gSSURGO User Guide (PDF; 10.7 MB) Soil Survey Staff. Gridded Soil Survey Geographic (gSSURGO) Database for Washington. United States Department of Agriculture, Natural Resources Conservation Service.
        li <a href="https://gdg.sc.egov.usda.gov/">STATSGO2</a>
            ul 
                li Soil Survey Staff. Gridded Soil Survey Geographic (STATSGO2) Database for Washington. United States Department of Agriculture, Natural Resources Conservation Service.
    
    h2 Soil Data Pre-Processing
    p To create a thematic soil texture map for either the gSSURGO, SSURGO, or STATSGO2 data sets the one too many to many hierarchies of relationships must be resolved with spatial map units and tabular data. Both soil tabular and spatial data tables are included when any of the data sets are downloaded from the USDA. For a complete overview of relationships, refer to the SSURGO/STATSGO2 documentation "SSURGO 2.2 Data Model - Diagram 1 of 2". To link the spatial map units to their textures a series of joins must be made between the tabular text file and the Shapefiles (Figure 1).
    img(width="693" height="258" alt="screenshot" title="screenshot" src="public/suppImage_180.png")
    p Figure 3. Spatial join process
    h3 Example: Tolt River Watershed Soil Data Pre-Processing
    ol 
        li Within ArcGIS, load the STATSGO2 shapefile "gsmsoilmu_a_wa.shp"
        li Using the "Join Field" (Data Management) tool set:
            ul
                li Input Table = "gsmsoilmu_a_wa.shp"
                li Input Join Field = "MUKEY"
                li Join Table = PATH + "component"
                li Output Join Field = "mukey"
                li Join Fields (optional) = CHECK "cokey"
        li Repeat "Join Field" for the C horizon, chtexturegrp, and chtexture tables to the final texture column.
    ul 
        li Dataset 1.
            ul 
                li In cases where the gSSURGO soil textures were initially classified under subclass, the soil textures need to be re-classified to their parent class of the USDA Soil Survey Manual, Chapter 3 (USDA, 2017) of the soil triangle textures that are used by VELMA (Figure 2).
                    ul 
                        li Sands &lt;- Coarse Sand, Sand, Fine Sand, Very Fine Sand
                        li Loamy Sand &lt;- Loamy Coarse Sand, Loamy Sand, Loamy Fine Sand, Loamy Very Find Sand
                        li Sandy Loams &lt;- Coarse Sandy Loam, Sandy Loam, Fine Sandy Loam, Very Fine Sandy Loam
                        li Silt Loam = Silt
    
    img(width="480" height="435" alt="screenshot" title="screenshot" src="public/suppImage_181.jpg")
    p Figure 4. USDA Soil texture triangle
    p Replaced all missing gSSURGO soils texture cells with STATSGO soil textures, creating a merged high- and low-resolution soils data layer (Table 1, Figure 4, Figure 5, and Figure 6).
    
    h3 Table 1. Soil texture key for VELMA
    img(width="222" height="240" alt="image" src="public/suppImage_182.png")
    h4 File Name tolt_ssurgo_statsgo_soil.tif
    table 
        thead 
            th Key
            th value
        tr 
            td 1
            td sand
        tr 
            td 2
            td loamy sand
        tr 
            td 3
            td sandy loam
        tr 
            td 4
            td loam
        tr 
            td 5
            td silt loam
        tr 
            td 6
            td sandy clay loam
        tr 
            td 7
            td clay loam
        tr 
            td 8
            td silty clay loam
        tr 
            td 9
            td sandy clay
        tr 
            td 10
            td silty clay
        tr 
            td 11
            td clay
    
    
    h2 Software Requirements and Processing
    p To run and produce the merged soil texture map (ASCII), you will need the following:
    ol 
        li Python version 2.x: Current release is 2.7.11
            ol 
                li Python comes pre-packaged within ArcGIS, so it is likely you already have it installed on your computer. For example, a default install is currently here: C:\Python27\ArcGIS10.2\python.exe. Check to see if you have Python installed before installing a new version. If Python is not installed, you can obtain a copy here: </a>https://www.python.org/download/releases/2.7/ Note that Python 2.7 is currently considered safe for use on U.S. EPA network and non-network computers.
        li ASCII Map requirements:
            ol 
                li gSSURGO ASCII format (.asc) for the AOI and a STATSGO2 ASCII format (.asc) for the AOI.
                    ul 
                        li Cell values set to match the soil texture key for VELAM (Table 1).
                        li No-data cells values set to -9999, which is the default ERSI ASCII no data value.
                        li These map(s) should match the exact extent and resolution of the AOI / DEM ASCII regardless if they are higher resolution.
                li Output filename to be determined by the user, ASCII format (.asc).
        li <i>"Soil_merger.py"</i> and can be run on the Command Prompt line with Python. This script requires at a minimum a gSSURGO map, one STATSGO2 map, and one output file name. The script will output an intermediate merged file map with No-data values. The merged soil texture values will assign values to the output map from the higher resolution gSSURGO map first and then from the STATSGO2 map. The final output map will fill No-data values with soil texture values. The technique uses a nearest neighbor search algorithm that will radiate out in one cell radius increments searching for the nearest cell with a valid texture value which will then be assigned to the No-data cell.
    h4 Command prompt input example:
    code "python .\soils_merger.py -SUR D:\Temp\ssurgo_aoi_texture_reclass.asc -STA D:\Temp\statsgo_aoi_texture_reclass.asc -OUT D:\Temp\Merged_output.asc" "python C:\Path\To\soils_merger.py -help"
    h5 for exact arguments (Figure 4).
    img(width="653" height="105" alt="screenshot" title="screenshot" src="public/suppImage_183.jpg")
    h5 Figure 5. Windows PowerShell python example
    img(width="620" height="466" alt="screenshot" title="screenshot" src="public/suppImage_184.jpg")
    p Figure 4. gSSURGO Soils texture and NODATA
    
    img(width="621" height="464" alt="screenshot" title="screenshot" src="public/suppImage_185.jpg")
    p Figure 5. STATSGO Soils texture and NODATA
    
    img(width="633" height="476" alt="screenshot" title="screenshot" src="public/suppImage_186.jpg")
    p Figure 6. Merged soils, gSSURGO and STATSGO.
    h4 References
    p Soil Science Division Staff. 2017. Soil survey manual. C. Ditzler, K. Scheffe, and H.C. Monger (eds.). USDA Handbook 18. Government Printing Office, Washington, D.C.
    h3 Scripts
    
    h4 soils_merger.py
    pre 
        code 
            | # Author: Paul Pettus # Date: 10-20-2017
            | # Description: Merge STATSGO2 and gSSURGO soil texture ASCII Maps #
            | # Output is a single ASCII map that will have an assigned soil texture value # for every cell
            | # 
            | # By default, cell values will be first assigned the value of the higher
            | # resolution gSSURGO and if no data exists in the gSSURGO map values # will be assigned to the output from the lower resolution STATSGO2. #
            | # If no values are found in either soil input maps, nodata cells will
            | # be assigned a nearest neighbor value from a circling radial stepping
            | # algorithm. The stepping algorithm steps one cell radius per iteration until # it finds a soil texture cell value. The algorithm ignores border cells.
            | #
            | # Last updated: 11-16-2017
            | import os, sys, numpy, re, argparse, itertools
            | # Error message class 
            | class Usage(Exception):
            |     def __init__(self, msg):
            |         self.msg = msg 
            | def main(argv=None):
            |     if argv is None:
            |         argv = sys.argv
            |     try:
            |         parser = argparse.ArgumentParser(description=&#39;Output is a single ASCII ma        that will&#39;+ &#39; have an assigned soil texture value for every cell&#39;)
            |         parser.add_argument(&#39;-SUR&#39;, action=&#39;store&#39;, dest=&#39;surFILE&#39;,default=&#39;D:/GIS/Nisqually/Soil/ssurgo_aoi_texture_reclass.tif.asc&#39;, help=&#39;Fully-qualified path + name of &quot;.asc&quot; gSSURGO soil texture file.&#39;)
            |         parser.add_argument(&#39;-STA&#39;, action=&#39;store&#39;, dest=&#39;staFILE&#39;,default=&#39;D:/GIS/Nisqually/Soil/statsgo_aoi_texture_reclass.asc&#39;, help=&#39;Fully-qualified path + name of &quot;.asc&quot; STATSGO2 soil texture file.&#39;)
            |         parser.add_argument(&#39;-OUT&#39;, action=&#39;store&#39;, dest=&#39;outFILE&#39;,default=&#39;D:/GIS/Nisqually/Soil/build_old_timey_mudButt_6.asc&#39;, help=&#39;Fully-qualified path + name of &quot;.asc&quot; output file.&#39;)
            |         args = parser.parse_args() # args parsing
            |         ssurgoAsc = os.path.abspath(args.surFILE)
            |         statsgoAsc = os.path.abspath(args.staFILE)
            |         buildFile = os.path.abspath(args.outFILE)
            |         # Check that files exists
            |         if not os.path.exists(ssurgoAsc):
            |             raise Usage(&#39;Cannot find AOI file &quot;&#39; + ssurgoAsc + &#39;&quot;&#39;)
            |         if not os.path.exists(statsgoAsc):
            |             raise Usage(&#39;Cannot find AOI file &quot;&#39; + statsgoAsc + &#39;&quot;&#39;)
            |         # do the work 
            |         mergeSoils(ssurgoAsc,statsgoAsc,buildFile)
            |         except Usage as e:
            |             print(e.msg)
            |     
            |     return 2
            | except Exception as e:
            |     # STUB exception handler
            |     # Warning: poor programming style.
            |     # Catches almost any exception (but not KeyboardInterrupt -- which is a Good Thing) 
            |     raise e
            | 
            | # Return an ascii file header 
            | def readHeader(asciiFile):
            |     if not os.path.exists(asciiFile):
            |         raise Usage(&#39;Cannot find ASCII &quot;&#39; + asciiFile + &#39;&quot;&#39;) 
            |     # Open file and read in header info
            |     readFile = open(asciiFile)
            |     header = readFile.readline() #ncols
            |     header += readFile.readline() #nrows
            |     header += readFile.readline() #xllcorner
            |     header += readFile.readline() #yllcorner
            |     header += readFile.readline() #cellsize
            |     header += readFile.readline() #NODATA_value
            |     readFile.close()
            |     return header
            | 
            | # Loop by one + one cell radius of surrounding cells to find nearest neighbor cell value 
            | def lookAround(passRow,passCol,inArray):
            |     inRow, inCol = inArray.shape
            |     # Initial search radius at one cell radius = 1
            |     found = False # found a value
            |     # Loop by one + one cell radius of surrounding cells to find nearest neighbor cell value 
            |     while found != True:
            |         rowList = [0] 
            |         colList = [0]
            |     # Create search box of one cell distance
            |     if radius == 1:
            |         for i in xrange(radius):
            |             for j in xrange(radius):
            |                 rowList.append((i + 1) * -1)
            |                 rowList.append(i + 1)
            |                 colList.append((i + 1) * -1)
            |                 colList.append(i + 1)
            |         # creates a list of the relative coordinates which to search around the missing value cell 
            |         setList = list(itertools.product(rowList, colList))
            |     # Else cell radius is larger than one cell 
            |     else:
            |         rowList = [0]
            |         colList = [0]
            |         # Create an inner one radius cell shorter search box 
            |         # Keeps track of already searched cells in radius
            |         for i in xrange((radius-1)):
            |             for j in xrange((radius-1)):
            |                 rowList.append((i + 1) * -1)
            |                 rowList.append(i + 1)
            |                 colList.append((i + 1) * -1)
            |                 colList.append(i + 1)
            |         minusList = list(itertools.product(rowList, colList))
            |         rowList = [0]
            |         colList = [0]
            |     # Create an full radius cell search box around the missing value cell 
            |         for i in xrange(radius):
            |             for j in xrange(radius):
            |                 rowList.append((i + 1) * -1)
            |                 rowList.append(i + 1)
            |                 colList.append((i + 1) * -1)
            |                 colList.append(i + 1)
            |         fullList = list(itertools.product(rowList, colList))
            |         # Select only the out radius cells from full box list
            |         setList = list(set(fullList) - set(minusList))
            |     for item in setList:
            |         # Check that searched cells are not out of array bounds
            |         if ((passRow + item[0]) &gt;= 0) and ((passRow + item[0]) &lt; inRow) and ((passCol + item[1]) &gt;= 0) and ((passCol + item[1]) &lt; inCol):
            |         # nearest neighbor cell value and return it
            |         value = inArray[(passRow + item[0]),(passCol + item[1])]
            |         if value != -9999:
            |             found = True 
            |             return value
            |     # Increase radius by a cell if NA / no values are found 
            |     radius = radius + 1
            | # Merge SSUGO STATSGO Soils, then replace nodata values 
            | def mergeSoils(ssurgoAsc,statsgoAsc,buildFile):        # Load ssrgo array file
            |     ssgoArray = numpy.loadtxt(ssurgoAsc, skiprows=6) # Load statsgo array file
            |     statsArray = numpy.loadtxt(statsgoAsc, skiprows=6)
            |     row, col = ssgoArray.shape # Create new merge array
            |     mergeArray = numpy.zeros((row,col))
            |     print(&quot;Starting texture ma        merge.&quot;) 
            |     for i in xrange(row):
            |         for j in xrange(col):
            |             # Get soil values
            |             ssgoValue = ssgoArray[i,j] statsValue = statsArray[i,j]
            |             # Assign higher resolution ssurgo values first 
            |             if ssgoValue != -9999:
            |                 mergeArray[i,j] = ssgoValue
            |             # Assign lower resolution statsgo next 
            |             elif statsValue != -9999:
            |                 mergeArray[i,j] = statsValue
            |             # Assign no data value if neither has a set has a value 
            |             else:
            |                 mergeArray[i,j] = -9999
            |     # Merged ssurgo statsgo, export complete ascii 
            |     fileName, fileExtension = os.path.splitext(buildFile) 
            |     mergeFile = fileName + &quot;_mergedFile&quot; + fileExtension header = readHeader(ssurgoAsc)
            |     f = open(mergeFile, &quot;w&quot;)
            |     f.write(header)
            |     numpy.savetxt(f, mergeArray, fmt=&quot;%i&quot;) 
            |     f.close()
            |     print(&quot;Created intermediate merged gSSURGO and STATSGO2 file: &quot;, mergeFile)
            |     reloadArray = numpy.loadtxt(mergeFile, skiprows=6)
            |     noDataArray = numpy.zeros((row,col)) 
            |     print(&quot;Starting NODATA fixes.&quot;)
            |     # Replace nodata cells with search radius algorythm 
            |     for i in xrange(row):
            |         for j in xrange(col):
            |             mergeValue = reloadArray[i,j]
            |             # if nodata, send to search algorythm 
            |             if mergeValue == -9999:
            |                 newValue = lookAround(i,j,reloadArray)
            |                 noDataArray[i,j] = newValue 
            |                 # else keep merged data value 
            |             else:
            |                 noDataArray[i,j] = mergeValue
            |     # Merged ssurgo statsgo and nodata filled, export complete ascii header = readHeader(ssurgoAsc)
            |     outputFile = buildFile
            |     f = open(outputFile, &quot;w&quot;) f.write(header)
            |     numpy.savetxt(f, noDataArray, fmt=&quot;%i&quot;) f.close()
            |     print(&quot;Completed texture file!&quot;)
            | if __name__== &quot;__main__&quot;:
            |     sys.exit(main())
            | # Old code for internal testing only 
            | ################################################################################################       
            | ## Modify files and locations ################################################################################################ 
            | ## SSURGO ASCII file
            | ##ssurgoAsc = &quot;D:/GIS/Nisqually/Soil/ssurgo_aoi_texture_reclass.tif.asc&quot; ### STATSGO ASCII file
            | ##statsgoAsc = &quot;D:/GIS/Nisqually/Soil/statsgo_aoi_texture_reclass.asc&quot; ### SSURGO and STATSGO merged ASCII file, intermediate ##mergeFile = &quot;D:/GIS/Nisqually/Soil/merged_soils_5.asc&quot;
            | ### SSURGO and STATSGO merged ASCII file with nodata fixed, final output ##buildFile = &quot;D:/GIS/Nisqually/Soil/build_old_timey_mudButt_5.asc&quot;
            | ################################################################################################ ##
            | ### Call main function to merge and replace nodata values ##mergeSoils(ssurgoAsc,statsgoAsc,buildFile)
