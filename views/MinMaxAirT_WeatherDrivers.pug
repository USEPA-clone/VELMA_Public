extends layout.pug
block content
  include partials/_warning
  h1
    | Minimum and Maximum Air Temperatures In VELMA
  h2
    | Overview
  p
    | Four of VELMA's six existing weather models now support specification of daily (i.e. per-step) minimum and/or maximum air temperature ("airT") values.
  table
    thead
      tr
        th
          | Weather Model
        th
          | Min/Max AirT Support?
        th
          | Notes
    tbody
      tr
        td
          | DefaultWeatherModel
        td
          | Yes
        td
          | For Min/Max AirT support use 
          code
            | weatherDriverDataFileName
          |  parameter and single weather driver data file.
      tr
        td
          | SingleLocationWeatherModel
        td
          | Yes
        td
          | Not selectable in JVelma GUI.<br>Use DefaultWeatherModel instead: it has identical behavior.
      tr
        td
          | MapDrivenWeatherModel
        td
          | No
        td
          | Not selectable in JVelma GUI.<br>For VELMA developer use only.
      tr
        td
          | MultipleLocationWeatherModel
        td
          | Yes
        td
          | Cell-specific values are provided by the nearest weather station driver data.
      tr
        td
          | MultipleWeightedLocationWeatherModel
        td
          | Yes
        td
          | Cell-specific values are weighted average of all weather station values.
      tr
        td
          | SpatialWeatherModel
        td
          | No
        td
          | Implementation possible, but pending verification of how to compute cell-specific value from driver data.
  p
    | Specifying min/max airT values is optional, but when they are provided, they may be accessed by the VELMA simulator engine and its sub-models. Currently, the only sub-model that uses min/max airT values is the SurfaceEvaporationModel.
  p
    | Min and max airT values are reported in columns of a VELMA simulation results 
    code
      | DailyResults.csv
    |  file and the files derived from it (
    code
      | Combined_DailyResults.csv
    |  and 
    code
      | AnnualResults.csv
    | ). They are also reported in columns of the 
    code
      | Cell_*.csv
    |  files for any 
    code
      | CellDataWriter
    |  parameterizations configured for the simulation run.
  h2
    | How to Specify Min/Max AirT Values
  p
    | Like all weather driver data, when minimum and or maximum air temperature driver data is provided for simulation configuration, it must be provided for every day (simulation step) within the range of years specified by the 
    code
      | forcing_start
    |  and 
    code
      | forcing_end
    |  configuration parameters.
  blockquote
    p
      | Example:
      br
      |  Suppose 
      code
        | forcing_start=1999
      |  and 
      code
        | forcing_end=2000
      | , then 
      code
        | 365 + 366 = 731
      |  total values are required for each driver data category.
  p
    em
      | Unlike
    |  other weather driver data, when a minumum or maximum air temperature driver data value is missing, the simulation will not fail with an error. However, the simulation will run behaving as if there is no minimum and/or maximum (depending upon what is missing) air temperature driver data at all. In such cases, all minimum and/or maximum air temperature values are reports as 
    code
      | NaN
    | .
  p
    | All the VELMA weather models that support min/max airT values expect weather station driver data to be provided in one or more .csv files. Each file should have one row of driver data per simulation step, and each row must provide the following values in the following order:
  pre
    code
      | Year,Jday,Precipitation,Average_AirT,Minumum_AirT,Maximum_AirT

  p
    | Where:
  ul
    li
      p
        strong
          code
            | Year
        |  is the year this driver data is for. This value must be a four-digit integer.
    li
      p
        strong
          code
            | Jday
        |  is the Julian day this driver data is for. This value must be an integer in the range [1, 366].
    li
      p
        strong
          code
            | Precipitation
        |  is the amount of precipitation (in mm) on 
        code
          | Year
        | , 
        code
          | Jday
        | . This value must be a non-negative floating-point or integer value.
    li
      p
        strong
          code
            | Average_AirT
        |  The average air temperature (in degrees C) on 
        code
          | Year
        | , 
        code
          | Jday
        | . This value must be a floating-point or integer value.
    li
      p
        strong
          code
            | Minimum_AirT
        |  The minimum air temperature (in degrees C) on 
        code
          | Year
        | , 
        code
          | Jday
        | . This value must be a floating-point or integer value.
    li
      p
        strong
          code
            | Maximum_AirT
        |  The maximum air temperature (in degrees C) on 
        code
          | Year
        | , 
        code
          | Jday
        | . This value must be a floating-point or integer value.
  p
    | A weather station driver data .csv file 
    em
      | must
    |  specify the 
    code
      | Year
    | , 
    code
      | Jday
    | , 
    code
      | Precipitation
    | , and 
    code
      | Average_AirT
    |  values, but the 
    code
      | Minimum_AirT
    |  and 
    code
      | Maximum_AirT
    |  values are optional.
  p
    | The following row formats are all valid and allowed:
    br
    |  
    em
      | (n.b. field names have been abbreviated to reduce the table width.)
  table
    thead
      tr
        th
          | Data Row Format
        th
          | Description
    tbody
      tr
        td
          code
            | Year,Jday,Precip,Ave_AirT,Min_AirT,Max_AirT
        td
          | Specifies all possible driver data
      tr
        td
          code
            | Year,Jday,Precip,Ave_AirT,Min_AirT
        td
          | Specifies minimum airT, but not maximum airT.<br>Note: do 
          em
            | not
          |  include a right-hand, trailing ',' (comma).<br>Max airT always reported as 
          code
            | NaN
          | .
      tr
        td
          code
            | Year,Jday,Precip,Ave_AirT,,Max_AirT
        td
          | Specifies minimum airT, but not maximum airT<br>Note: the ',,' "empty" field for the missing minimum airT is 
          strong
            em
              | required
          | .<br>Min airT always reported as 
          code
            | NaN
          | .
      tr
        td
          code
            | Year,Jday,Precip,Ave_AirT
        td
          | Only specifies required driver data.<br>Note: do 
          em
            | not
          |  include a right-hand, trailing ',' (comma).<br>Both min and max airT always reported as 
          code
            | NaN
          | .
  h2
    | Model-Specific Details
  h3
    code
      | DefaultWeatherModel
  p
    | Prior to supporting min/max airT values, the 
    code
      | DefaultWeatherModel
    |  used two separate configuration parameters to specify two separate driver data files one for precipitation, and one for (average) air temperature. To support legacy use, those parameters still exist, but new simulation configurations should specify a single driver data file (in the format described above) to the 
    code
      | weatherDriverDataFileName
    |  configuration parameter.
    br
    |  When the 
    code
      | weatherDriverDataFileName
    |  is specified, the two legacy parameters are ignored, and data is loaded 
    em
      | only
    |  from the single driver data file. However, when 
    code
      | weatherDriverDataFileName
    |  is left unspecified (i.e. blank), the 
    code
      | DefaultWeatherModel
    |  will try to load data via the two legacy parameters, and will expect those parameters to specify valid driver data files in the legacy format.
  h3
    code
      | SingleLocationWeatherModel
  p
    | The 
    code
      | SingleLocationWeatherModel
    |  is not intended for direct specification by VELMA users.
    br
    |  It is used "underneath" the 
    code
      | MultipleLocationWeatherModel
    | . VELMA users configuring a simulation should use 
    code
      | DefaultWeatherModel
    | , which is the selectable, functional equivalent of 
    code
      | SingleWeatherModel
    | .
  h3
    code
      | MultipleLocationWeatherModel
  p
    | Each weather station driver data file specified in a row of the 
    code
      | weatherLocationsDataFileName
    |  configuration parameter's .csv list of locations and weather stations can specify min and/or max airT values by following the format described above.
  p
    | The "all or nothing" rule for one driver data file applies across 
    em
      | all
    |  weather station driver date files. If 
    em
      | any
    |  station is missing even one min or max airT value, 
    em
      | every
    |  weather station behaves as if 
    em
      | no
    |  min or max airT values exist.
  h3
    code
      | MultipleWeightedLocationWeatherModel
  p
    | Each weather station driver data file specified in a row of the 
    code
      | weatherLocationsDataFileName
    |  configuration parameter's .csv list of locations and weather stations can specify min and/or max airT values by following the format described above.
  p
    | The "all or nothing" rule for one driver data file applies across 
    em
      | all
    |  weather station driver date files. If 
    em
      | any
    |  station is missing even one min or max airT value, 
    em
      | every
    |  weather station behaves as if 
    em
      | no
    |  min or max airT values exist.
  p
    code
      | MultipleWeightedLocationWeatherModel
    |  computes cell-specific values as a weighted distance average of all specified weather station values: review min and max airT simulation value carefully.
  h2
    | Appendix A: Notes for VELMA Developers
  p
    | Minimum and maximum air temperature support was added to VELMA code base by declaring new methods in the 
    code
      | IWeatherModel
    |  interface:
  pre
    code
      | [ . . . ]
      | public float getMinAirTemperature(int iCell, ISimulatorClock clock);
      | public float getMaxAirTemperature(int iCell, ISimulatorClock clock);
      | public boolean hasMinAirTemperatureData();
      | public boolean hasMaxAirTemperatureData();
      | [ . . . ]

  p
    | The 
    code
      | BaseWeatherModel
    |  class acts as a base-level implementor of 
    code
      | IWeatherModel
    | . It was updated with stub methods that behave as follows:
  ul
    li
      code
        | BaseWeatherModel.getMinAirTemperature
      |  always returns 
      code
        | Float.NaN
      | .
    li
      code
        | BaseWeatherModel.getMaxAirTemperature
      |  always returns 
      code
        | Float.NaN
      | .
    li
      code
        | BaseWeatherModel.hasMinAirTemperatureData
      |  always returns 
      code
        | false
      | .
    li
      code
        | BaseWeatherModel.hasMaxAirTemperatureData
      |  always returns 
      code
        | false
      | .
  p
    | All six existing VELMA weather model extend 
    code
      | BaseWeatherModel
    | , so even if a specific weather model hasn't been updated to support min/max airT data (e.g. 
    code
      | SpatialWeatherModel
    | ), the above four functions are available and return consistent, correct (for weather models without min/max airT support) values.
  p
    | Specific weather models (e.g. 
    code
      | DefaultWeatherModel
    | ) that 
    em
      | have
    |  been updated to support min/max airT values override the 
    code
      | BaseWeatherModel
    |  stub method implementations to provide actual min and/or max airT data, depending, of course, on what the driver data file(s) of a simulation configuration provide.
  p
    | The 
    code
      | GlobalState
    |  class further wraps a given simulation instance's weather model object's calls with methods that do not require passing in the simulator clock:
  pre
    code
      | [ . . . ]
      | public float getMinAirTemperature(int iCell)
      | public float getMaxAirTemperature(int iCell)
      | public boolean hasMinAirTemperatureData()
      | public boolean hasMaxAirTemperatureData()
      | [ . . . ]

  p
    | These methods call the corresponding underlying weather model method with the current simulation step, and are what other sub-model code (e.g. a 
    code
      | SurfaceEvaporationModel
    |  object instance) are expected to call to determine whether min/max airT values are available (the 
    code
      | have...
    |  methods) and what those values are (the 
    code
      | get...
    |  methods).