extends layout.pug
block content
  h1
    | Running a VELMA Simulation From a Command Line
  h2
    | Overview
  p
    | Most VELMA simulation results (excluding Parallel runs) are generated via the JVelma GUI environment (henceforth referred to as "VelmaGUI"). However, you can also start a VELMA simulation directly from a command-line console prompt via VelmaSimulatorCmdLine (henceforth referred to as "VelmaSim").
  p
    | You may be thinking, "JVelma starts from a command-line console prompt". While that it true, what is starting is VELMA's GUI environment (VelmaGUI). After VelmaGUI starts, you load a simulation configuration .xml file, possibly edit it, and then click the "Run" button to start it running 
    em
      | all within VELMA GUI
    | .
    br
    |  In contrast, when you start VelmaSimulatorCmdLine (VelmaSim) from a command-line console prompt, it 
    em
      | immediately
    |  loads and starts running the simulation configuration .xml file that you specify. Tracing/log statements that would have appeared in VelmaGUI's Console tab instead appear directly in the command-line console's window.
  p
    | Both VelmaGUI and VelmaSim use the same simulation engine, and generate the same results for a given simulation configuration, but they provide different benefits:
  p
    strong
      | VelmaGUI
    | :
  ul
    li
      | Provides a way to review and edit the simulation configuration .xml properties.
    li
      | Provides a display allowing (limited) runtime visualization of results.
  p
    strong
      | VelmaSim
    | :
  ul
    li
      | Uses a bit less memory VelmaGUI.
    li
      | May run a bit faster than VelmaGUI.
    li
      | Can be invoked by other user-written (e.g. Python, Powershell) scripts to batch-start multiple VELMA simulations.
    li
      | Command-lines used to start VelmaSim runs can be copied and kept to easily document exactly how the run was invoked.
  p
    | Use whichever suits your need for a given simulation run.
  h2
    | Quickstart Guide
  h3
    | Requirements
  p
    | To run a Velma simulation configuration using VelmaSimulatorCmdLine, you must have the following installed and available:
  ul
    li
      | A 64-bit Java JRE, version 1.8 or later, installed and available from your computer's command line.
    li
      | A command line console.
      br
      |  Under Windows, we recommend PowerShell (usually pre-installed as a standard part of Windows 10).
      br
      |  It is possible to run VELMA in other Windows consoles (e.g. Windows Command Prompt), or even on other operating systems (e.g. Linux), but we focus on Windows 10 and PowerShell in this document, because it is by far the most common combination VELMA is run under.
    li
      | A VELMA 
      code
        | JVelma.jar
      |  file.
  p
    | You must also know the following information:
  ul
    li
      | The fully-qualified path name for the location of your JVelma.jar file.
    li
      | The fully-qualified path name for the location of the VELMA simulation configuration .xml file you wish to run.
    li
      | How much runtime memory (computer RAM, 
      em
        | not
      |  disk space) to allocate for the simulation run.
  h3
    | Running a Simulation via VelmaSimulatorCmdLine in PowerShell
  h4
    strong
      | Open a PowerShell Console
  p
    | If you are familiar with Windows Powershell, open a console window as you normally do.
    br
    |  If you are unfamiliar with Windows Powershell, you can open a Powershell window via the following steps:
  ol
    li
      | Press the Windows Start Key + the R key to open the "Run" dialog box.
    li
      | Type "powershell" in the Run dialog's textbox.
    li
      | Click the Run dialog's OK button.
  h4
    strong
      | Verify the Java JRE
  p
    | If this is the first time you are running a VELMA simulation on a particular computer, verify that it has a suitable Java JRE available.
    br
    |  In the PowerShell console, type the command 
    code
      | java --version
    | , then press the 
    code
      | Enter
    |  key.
    br
    |  Here is an example:
  pre
    code
      | PS C:\Users\meep> java -version
      | java version "1.8.0_291"
      | Java(TM) SE Runtime Environment (build 1.8.0_291-b10)
      | Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)
      | PS C:\Users\meep>

  p
    | In the example above 
    code
      | PS C:\Users\meep>
    |  is PowerShell's command prompt (yours may look different).
    br
    |  If your 
    code
      | java -version
    |  command result reports a version number lower than 1.8, or does not report "64-bit", your VELMA simulations may not start or run successfully (for either VelmaSim or VelmaGUI).
    br
    |  If your 
    code
      | java -version
    |  command result is an error message that begins like this ...
  pre
    code
      | java : The term 'java' is not recognized as the name of a cmdlet, function, script file, or operable program.

  p
    | ... your computer does not have a Java JRE installed, or PowerShell does not know where to find it.
  h4
    strong
      | Start a Simulation With VelmaSimulatorCmdLine
  p
    | This is the format for the PowerShell command line required to run a VELMA simulation.
  pre
    code
      | java -Xmx<mem> -cp <jarfullpath>\JVelma.jar gov.epa.velmasimulator.VelmaSimulatorCmdLine <xmlfullpath>\<simconfig.xml>

  p
    | The items above must appear as shown, in the order shown:
  ul
    li
      code
        | java
      |  invokes the Java JRE installed on your computer
    li
      code
        | -Xmx<mem>
      |  allocates 
      code
        | <mem>
      |  amount of runtime memory to run the simulation.
    li
      code
        | -cp
      |  identifies the item that follows it to the Java JRE as the file containing Java code to run.
    li
      code
        | <jarfullpath>\JVelma.jar
      |  represents the fully-qualified path and name of your JVelma.jar (which contains VelmaSim).
    li
      code
        | gov.epa.velmasimulator.VelmaSimulatorCmdLine
      |  is the fully-qualified Java program name of VelmaSim.
    li
      code
        | <xmlfullpath>\<simconfig.xml>
      |  represents the fully-qualified path and name of the simulation configuration .xml file to run.
  p
    | Here is an example of an actual command line in the format outlined above:
  pre
    code
      | PS C:\Users\meep> java -Xmx1g -cp C:\Users\meep\VELMA\JVelma.jar gov.epa.velmasimulator.VelmaSimulatorCmdLine C:Users\meep\VelmaConfigs\OR_BlueRiver_ws10.xml

  p
    | Here is how the items in the specific example command line map back to the general command line format:
  ul
    li
      code
        | PS C:\Users\meep>
      |  is a typical PowerShell command prompt (yours may look different).
    li
      | The 
      code
        | <mem>
      |  specified is 
      code
        | 1g
      | : 
      code
        | -Xmx1g
      |  means "allocate 1 Gigabyte of RAM for this simulation run".
    li
      | The fully-qualified JVelma.jar location (
      code
        | <jarfullpath>\JVelma.jar
      | ) is: 
      code
        | C:\Users\meep\VELMA\JVelma.jar
    li
      | The fully-qualified simulation configuration .xml file (
      code
        | <xmlfullpath>\<simconfig.xml>
      | ) is: 
      code
        | C:Users\meep\VelmaConfigs\OR_BlueRiver_ws10.xml
  p
    | All other items are unchanged, and appear exactly as they are specified in the general command line format.
  p
    | Once you have typed a command line in the format above into your PowerShell console, press the 
    code
      | Enter
    |  key to start the simulation running.
  p
    | Runtime logging statements that would have appeared in the VelmaGUI's "Console" tab panel will instead appear in the console.
  h2
    | Usage Message and Command Line Options
  p
    | When you run VelmaSim without specifying a VELMA simulation configuration .xml file, VelmaSim displays a usage message to the console.
    br
    |  The message provides the VELMA version, reminds you that a VELMA simulation configuration .xml file is required, and lists optional command-line arguments that are available.
  p
    | Here is an example:
  pre
    code
      | PS C:\Users\meep> java -Xmx1g -cp C:\Users\meep\VELMA\JVelma.jar gov.epa.velmasimulator.VelmaSimulatorCmdLine
      | VELMA_2.1.0.39
      | Usage: VelmaSimulatorCmdLine <fullName_simulationConfiguration.xml> [--lint] [--kv="<key>,<val>"]
      | Where:
      | 
      | Required arguments are:
      | 
      |   <fullName_simulationConfiguration.xml>
      |     The fully-qualified path and name of a valid VELMA simulation configuration (.xml) file.
      |     Exactly ONE simulation configuration file fullName must appear in the command line.
      | 
      | Optional arguments are:
      | 
      |   --lint
      |     Performs the initialization step, but does not actually run the simulation.
      |     Warnings or errors encountered during initialization are reported to console.
      |     No results folder or files are created.
      | 
      |   --kv="<key>,<val>"
      |     <key> is the full (/group/item/name) text of a VELMA Simulation Configuration parameter.
      |     <val> is the value to set for that <key>.
      |     Multiple --kv arguments may occur in the command line.
      |     No two --kv arguments may specify the same <key>
      |     The --kv pairs are set or added to the Simulation Configuration at simulator initialization.
      |     (The original fullName_simulationConfiguration.xml file is NOT modified)

  blockquote
    p
      | Note: the text of the usage message varies between different VELMA versions. If you are using an older-version JVelma.jar, some or most of the usage message text shown above may be missing. Options that are not displayed are unavailable.
  h3
    | Command Line Options
  p
    | Command line options are exactly that: optional. If you choose to use them, we recommend placing them at the end of your command line. That way, you can recall the command (via the up-arrow key in Windows PowerShell) and easily backspace over them to run the same command with the optional argurments removed or changed.
  h4
    strong
      | The --lint Option
  p
    | When the 
    code
      | --lint
    |  option is added to a command line, VelmaSim starts the simulator engine and performs initialization, but then stops and does not actually run the simulation. No results folder or output files are created. Additionally, console output is filtered down to only WARNING and SEVERE messages.
  p
    | Running VelmaSim with 
    code
      | --lint
    |  allows you to confirm that your simulation configuration .xml file will initialize properly. The console filtering emphasizes any WARNING or SEVERE log messagese that occur. Without 
    code
      | --lint
    |  they can be missed amongst the many 
    code
      | CONFIG
    |  and 
    code
      | INFO
    |  messages that normally echo to the console.
  p
    | A peculiarity regarding warnings is that a VelmaSim started with 
    code
      | --lint
    |  
    em
      | always
    |  echoes at least two warnings to the console. This is because 
    code
      | --lint
    |  suppresses all results folder and file output, and in punctilious fashion, issues warnings to call attention to that suppression.
    br
    |  The two warnings look like this:
  pre
    code
      | WARNING VelmaSimulatorEngine runLinter: VELMA Lint Mode Enabled: startups parameter suppressAllOutputFiles overridden and set == true
      | WARNING GlobalState setOutputDataLocationDir: All File Output is suppressed: ignoring Output Data Location

  p
    | Even if you simulation configuration .xml initializes correctly and has no "real" warnings, you will see the two messages listed above when you add the 
    code
      | --lint
    |  option to your VelmaSim command line.
  p
    | If you see other, additional warnings, pay attention to them. Your simulation may run to completion even if WARNING messages appear during initialization, but it may not produce trustworthy results.
    br
    |  For example, the following WARNING message ...
  pre
    code
      | WARNING GlobalState initializeCoverSpeciesForRun: CoverSpecies uniqueId=10 uniqueName="LowShrub" referenced in: dem=NO sid=NO inSidCount=0

  p
    | ... indicates that your simulation configuration .xml contains a CoverSpecies parameterization that is not referenced anywhere in the specified cover id map. This might be fine -- there's no harm (apart from using some memory) in specifying but not referencing CoverSpecies that you wish to ignore. However, if "LowShrub" is a CoverSpecies that you definitely expected to be part of your simulation run, this warning indicates that your should check the CoverSpecies parameterization for typos or the correctness of your cover id map.
  p
    | If you see a SEVERE error message, it indicates that VelmaSim was unable to successfully complete initializing. You will need to correct the error message's cause before your simulation will successfully initialize and run.
  blockquote
    p
      | An aside: the 
      code
        | --lint
      |  option name is due to 
      a
        | historical precendent
      | , although 
      code
        | --lint
      | 's capabilities are minimal compared to "real" linter tools.
  h4
    strong
      | The --kv Option
  p
    | The 
    code
      | --kv
    |  option allows you to override the value of a parameter in the simulation configuration .xml file, replacing it with a value specified on the VelmaSim command line.
  p
    | Multiple 
    code
      | --kv
    |  arguments may be specified for a single command line, to change multiple parameters (one parameter per 
    code
      | --kv
    |  argument) for a given VelmaSim run.
  p
    | The 
    code
      | --kv
    |  option cannot add or remove a parameter, it can only change an existing parameter's value, but it can change 
    em
      | any
    |  parameter with 
    em
      | no
    |  validation of the new value, so employ it with considerable caution and care.
  p
    | A 
    code
      | --kv
    |  option must indicate what parameter it will override, and the new value for that parameter.
    br
    |  The 
    code
      | --kv
    |  option is informally called the "kv-override", because it provides a key (the parameter) and a value (to -- i.e. override -- the existing value) to the VELMA simulator engine.
  p
    | The syntax for a 
    code
      | --kv
    |  option, used to indicate the parameter and assocated value is:
  pre
    code
      | --kv="<key>,<val>"

  ul
    li
      | Specify the 
      em
        | fully qualified name
      |  of the parameter (the 
      code
        | <key>
      | ) to change.
    li
      | A valid value (the 
      code
        | <val>
      | ) to assign to the parameter.
    li
      | Separate the 
      code
        | <key>
      |  and 
      code
        | <val>
      |  with a comma (
      code
        | ,
      | ) character.
    li
      | Enclose the 
      code
        | <key>,<val>
      |  pair in double-quotes (
      code
        | "
      | ).
    li
      | Do not use whitespace around the comma, or around the equals (
      code
        | =
      | ) character.
  p
    | A fully-qualified parameter name is VELMA's internal identifier for a given configuration parameter.
    br
    |  VELMA parameters are commonly referred to via their "short" name (e.g. 
    code
      | run_index
    | ), but every "short" parameter name actually corresponds to a longer fully-qualified name.
    br
    |  Fully-qualified parameter names have this form:
  pre
    code
      | /<group_key>/<item_key>/<parameter_key>

  p
    | The 
    code
      | <parameter_key>
    |  portion of the fully-qualified name corresponds to what is colloquially the "short" parameter name.
    br
    |  For example, the fully qualified parameter name corresponding to the "short" parameter name 
    code
      | run_index
    |  is:
  pre
    code
      | /calibration/VelmaInputs.properties/run_index

  p
    | The forward-slash (
    code
      | /
    | ) characters are required as separators, but are not themselves part of the key names.
  p
    | You can determine the fully-qualified prefix for a "short" parameter name in a number of ways, but the two simplest and most common methods are to look in the VelmaGUI ("JVelma") Parameter's tab, or look in the SimulationConfiguration.csv file of an existing simulation result generated with the same simulation configuration .xml file you're planning to modify via a 
    code
      | --kv
    |  option.
  h4
    em
      | Finding a fully-qualified parameter name using VelmaGUI
  ol
    li
      | Start the VelmaGUI ("JVelma") running
    li
      | Load your simulation configuration .xml file
    li
      | Click to the "Parameters" tab.
    li
      | Scroll through the table's rows until you find the parameter "short" name in the "Parameter" column of the table
      br
      |  OR Enter the "short" name in the middle of the 3 filter text-entry-boxes above the table and press Enter or Tab to filter down to the appropriate row.
  p
    | The column names of the Parameters tab's table of parameters indicate column values that match components of a fully-qualified parameter name.
    br
    |  Here is our 
    code
      | run_index
    |  example again, to make the correspondence explicit:
  table
    thead
      tr
        th
          | Parameter name component
        th
          code
            | <group_key>
        th
          code
            | <item_key>
        th
          code
            | <parameter_key>
    tbody
      tr
        td
          | VelmaGUI Parameters Column Name
        td
          | Group
        td
          | Item
        td
          | Parameter
      tr
        td
          code
            | run_index
          |  example
        td
          | calibration
        td
          | VelmaInputs.properties
        td
          | run_index
  h4
    em
      | Finding a fully-qualified parameter name in a SimulationConfiguration.csv file
  p
    | When a VELMA simulation run generates results, one of the files written to the results folder is the SimulationConfiguration.csv file. The file lists every fully-qualified parameter name specified for the simulation run in column A, and the value specified for the parameter in column B (SimulationConfiguration.csv files have no header row). The rows are in asscending order, sorted alphabetically by fully-qualified name.
    br
    |  Here are a few rows at the top of a SimulationConfiguration.csv file, as and example:
  pre
    code
      | /calibration/VelmaCalibration.properties/DDs, 3.0
      | /calibration/VelmaCalibration.properties/Tmlt, 2.0
      | /calibration/VelmaCalibration.properties/Tsn, 0.0
      | /calibration/VelmaCalibration.properties/avgAT, 13.0
      | /calibration/VelmaCalibration.properties/avgGST, 12.4
      | /calibration/VelmaCalibration.properties/be, 6.33974
      | /calibration/VelmaCalibration.properties/co2RespirationFraction, 0.98
      | /calibration/VelmaCalibration.properties/deg_lat, 38.867914
      | [ ... ]

  p
    | The easiest way to search a SimulationConfiguration.csv file is with the find or search feature of Excel or a text editor:
  ol
    li
      | Open the SimulationConfiguration.csv file in an editor or in Excel.
    li
      | Using the editor or Excel's search function, search for the parameter's short name. Doing so should locate the row of the SimulationConfiguration.csv file containing the fully-qualified name (since the short name is always part of the fully-qualified name).
    li
      | Use the fully-qualified name in place of the short name when you specify your --kv option.
  p
    | You can also search a SimulationConfiguration.csv file directly from a PowerShell console, using the 
    a
      | Select-String cmdlet
    | .
    br
    |  Here is an example:
  pre
    code
      | PS C:\Users\meep> Select-String -Pattern "/be," C:\Users\meep\Velma_Results\MD_ws109\SimulationConfiguration.csv

  p
    | The above command line searches the SimulationCongfiguration.csv file partially display above, for the fully-qualified name of the 
    code
      | be
    |  parameter.
    br
    |  Always include the leading forward-slash (
    code
      | /
    | ) and trailing comma (
    code
      | ,
    | ) with the parameter short name you're looking for -- e.g. search for "
    code
      | /be,
    | ", 
    em
      | not
    |  "
    code
      | be
    | ".
    br
    |  Select-String is a general-purpose text search tool, and it may return many lines that you don't care about if you omit the 
    code
      | /
    |  and 
    code
      | ,
    | , or add space between them and the parameter name. Adding space before the 
    code
      | /
    |  or after the 
    code
      | ,
    |  will also throw off the search results. As just two examples among many, neither "
    code
      | / be,
    | " nor "
    code
      | /be,
    |  " would return any result if we tried them on our SimulationConfiguration.csv file.
  p
    | Select-String outputs its results to the console.
    br
    |  The output for the example search above looks like this:
  pre
    code
      | C:\Users\meep\Velma_Results\MD_ws109\SimulationConfiguration.csv:6:/calibration/VelmaCalibration.properties/be, 6.33974

  p
    | This is Select-String's default results format. for line in the file containing 
    code
      | /be,
    | , it reports the file's path/name, the line number, and the line itself, using 
    code
      | :
    |  as a separator.
    br
    |  The following example repeats the search with a bit of syntax that forces Select-String to report the lines it finds without the file or line number information:
  pre
    code
      | PS C:\Users\meep> (Select-String -Pattern "/be," C:\Users\meep\Velma_Results\MD_ws109\SimulationConfiguration.csv).Line

  p
    | This variation of the search command returns the following result to the console:
  pre
    code
      | /calibration/VelmaCalibration.properties/be, 6.33974

  p
    | Notice that this is almost exactly what the 
    code
      | --kv
    |  switch requires to specify its 
    code
      | <key>,<val>
    |  pair.
    br
    |  You could ...
  ol
    li
      | Copy the above search result.
    li
      | Enclose it in double-quotes (
      code
        | "
      | ).
    li
      | Remove the whitespace after the comma.
    li
      | Change the old value to a new, different value.
    li
      | Prefix it with 
      code
        | --kv=
  p
    | ... and you'd have a correctly-specified 
    code
      | --kv
    |  option item:
  pre
    code
      | --kv="/calibration/VelmaCalibration.properties/be,3.125"

  p
    | As a final example, the full command line below invokes VelmaSim and includes two 
    code
      | --kv
    |  options.
    br
    |  The first 
    code
      | --kv
    |  option sets a new 
    code
      | be
    |  value, and the second changes the 
    code
      | run_index
    |  name. In this example when VelmaSim initializes and runs, it will set 
    code
      | be
    | =3.125 regardless of its value in OR_BlueRiver_ws10.xml, and will write the results to a results folder named "new_be-OR_BlueRiver_ws10" (at the output location specified in OR_BlueRiver_ws10.xml -- the output root directory path has not been overridden in this example).
    br
    |  This example also illustrates a useful feature of the PowerShell command line: using the backtick (`) character to split a long command across multiple lines:
  pre
    code
      | PS C:\Users\meep> java -Xmx1g -cp C:\Users\meep\VELMA\JVelma.jar `
      | >> gov.epa.velmasimulator.VelmaSimulatorCmdLine `
      | >> C:Users\meep\VelmaConfigs\OR_BlueRiver_ws10.xml `
      | >> --kv="/calibration/VelmaCalibration.properties/be,3.125" `
      | >> --kv="/calibration/VelmaInputs.properties/run_index,new_be-OR_BlueRiver_ws10"

  p
    | When you type a command into the PowerShell console at the command prompt (
    code
      | >
    | ), if you end the line with a backtick character (`), then instead of running your (incomplete) command, PowerShell opens a new line, displays the prompt (
    code
      | >>
    | ) and waits for you to type more of the command. PowerShell will continue to do this until you end a line without a backtick character. It will then run your command.
  p
    | Using the backtick character for command-line continuation makes it easier review long commands before running them, however, it can be tricky to get right. Remember the following rules:
  ul
    li
      | Do not end a line with a single-quote character instead of the backtick character; they are 
      em
        | not
      |  equivalent or interchangeable in this context.
    li
      | Only split a command line at whitespace locations, never in the middle of a "word" on the command line.
    li
      | As a special restriction of the above, always keep 
      code
        | -cp
      |  and 
      code
        | <jarfullpath>\JVelma.jar
      |  on one line: do not split between at the whitespace between them.
    li
      | Be aware of what you are doing. It's easy to forget the backtick character about halfway through a multi-line command, at which point PowerShell start the incomplete portion you've typed up to that point.
    li
      | Always inlcude a whitespace character just 
      em
        | before
      |  the backtick character.
  h2
    | Appendix A: Common Command-Line Errors
  p
    | The VelmaSim command line is easily broken by mistyped commands, and because commands can easily become long, they can be easy to mistype.
    br
    |  Moreover, VelmaSim is terse and abrupt when it encounters a command line that it does not understand, which can make it difficult to determine the cause of an error.
  p
    | This appendix contains an ad-hoc collection of common command line error descriptions as a cautionary quick-reference.
  h3
    | Java Errors
  p
    | The arguments on the command line after 
    code
      | java
    |  and before 
    code
      | gov.epa.velmasimulator.VelmaSimulatorCmdLine
    |  are used by the Java runtime engine, not by VelmaSim.
  h4
    strong
      | Ommiting the -Xmx size suffix
  p
    | The 
    code
      | -Xmx
    |  argument allows you to specify a memory amount. Typically, VelmaSim likes at least a Gigabyte of memory, and that is specified as 
    code
      | -Xmx1g
    |  -- "1" with "g" indicating "Gigabyte". If the "g" is ommitted, the following is likely to happen:
  pre
    code
      | PS C:\Users\meep> java -Xmx1 -cp C:\Users\meep\VELMA\JVelma.jar gov.epa.velmasimulator.VelmaSimulatorCmdLine
      | Error occurred during initialization of VM
      | Too small initial heap
      | PS C:\Users\kdjang\Velma_GitHub>                                                                                         

  h4
    strong
      | Misspelling VelmaSim's fully-qualified name
  p
    | In this example, VelmaSim's fully-qualified name is misspelled:
  pre
    code
      | PS C:\Users\meep> java -Xmx1 -cp C:\Users\meep\VELMA\JVelma.jar gov.epa.velmasimulator.VelmaSimulatorCmdLine
      | Error: Could not find or load main class gov.epa.velmasimualtor.VelmaSimulatorCmdLine
      | PS C:\Users\kdjang\Velma_GitHub>                                                                                         

  p
    | This is self-explanatory, but very easy to do, and surprisingly difficult to catch before Java complains about it.
  h4
    strong
      | Specifying a missing or inaccessible .jar file
  p
    | The following example misspells the .jar file name:
  pre
    code
      | PS C:\Users\meep> java -Xmx1 -cp C:\Users\meep\VELMA\JVelm.jar gov.epa.velmasimulator.VelmaSimulatorCmdLine
      | Error: Could not find or load main class gov.epa.velmasimualtor.VelmaSimulatorCmdLine

  p
    | The error message is the same as for the previous error, but in this case, VelmaSim's fully-qualified name is spelled correctly.
  h4
    strong
      | Omitting 
      code
        | -cp
  p
    | An example is the clearest way to describe this situation:
  pre
    code
      | PS C:\Users\meep> java -Xmx1 -cp C:\Users\meep\VELMA\JVelm.jar gov.epa.velmasimulator.VelmaSimulatorCmdLine
      | Error: Could not find or load main class C:\Users\meep\VELMA\JVelm.jar

  p
    | This looks a lot like the two previous error messages, but notice that the "main class" is specified as the name of the JVelma.jar file. Without the 
    code
      | -cp
    |  argument, Java has assumed that the fully-qualified "class" we want to run is the .jar file itself, which is incorrect, we want to run the 
    code
      | gov.epa.velmasimulator.VelmaSimulatorCmdLine
    |  code contained 
    em
      | inside
    |  the .jar file. (In effect, the 
    code
      | -cp
    |  argument indicates to Java, "look in what follows me to run what follows it: 
    code
      | -cp <place_to_look> <thing_to_run>
    | .)
  h3
    | VelmaSim Errors
  p
    | Everything on the command line after 
    code
      | gov.epa.velmasimulator.VelmaSimulatorCmdLine
    |  is used by VelmaSim.
  h4
    strong
      | Specifying a missing or inaccessible simulation configuration.xml file
  p
    | When VelmaSim cannot find or open the simulation configuration .xml file you specify, it stops abruptly.
  h4
    strong
      | Omitting the simulation configuration .xml file, but including options
  p
    | When you provide 
    em
      | no
    |  arguments after 
    code
      | gov.epa.velmasimulator.VelmaSimulatorCmdLine
      | , VelmaSim displays the usage message.
    br
    |  However, if you provide 
    em
      | any
    |  arguments, exactly one of them 
    em
      | must
    |  be a valid simulation configuration .xml file.
    br
    |  Here's an example that specifies the --lint option, but does not specify an .xml file:
  pre
    code
      | PS C:\Users\meep> java -Xmx1g -cp C:\Users\meep\VELMA\JVelma.jar gov.epa.velmasimulator.VelmaSimulatorCmdLine --lint
      | FAIL! exception="java.lang.IllegalArgumentException: No simulation configuration .xml file specified."
      | FAIL! message="No simulation configuration .xml file specified."
      | FAIL! VELMA simulation run halted, configuration="null"
      | java.lang.IllegalArgumentException: No simulation configuration .xml file specified.
      |         at gov.epa.velmasimulator.VelmaSimulatorCmdLine.main(VelmaSimulatorCmdLine.java:93)

  h4
    strong
      | Misspelling an option name
  p
    | Understandably, VelmaSim will not run if you specify an option and misspell its name.
    br
    |  However, the error message it reports for this situation may be surprising and confusing.
    br
    |  Here is an (PowerShell multi-cmdline) example with 
    code
      | --kv
    |  misspelled as 
    code
      | kc
    | :
  pre
    code
      | >> PS C:\Users\meep> java -Xmx1g -cp C:\Users\meep\VELMA\JVelma.jar `
      | >> gov.epa.velmasimulator.VelmaSimulatorCmdLine `
      | >> C:Users\meep\VelmaConfigs\OR_BlueRiver_ws10.xml `
      | >> --kc="/calibration/VelmaInputs.properties/run_index,new_be-OR_BlueRiver_ws10" `
      | >> --lint
      | >>
      | FAIL! exception="java.lang.IllegalArgumentException: Multiple simulation configuration .xml files specified."
      | FAIL! message="Multiple simulation configuration .xml files specified."
      | FAIL! VELMA simulation run halted, configuration="C:Users\meep\VelmaConfigs\OR_BlueRiver_ws10.xml"
      | java.lang.IllegalArgumentException: Multiple simulation configuration .xml files specified.
      |         at gov.epa.velmasimulator.VelmaSimulatorCmdLine.main(VelmaSimulatorCmdLine.java:86)

  p
    | VelmaSim catches the misspelling, but identifies it as a second simulation configuration .xml file. This happens because VelmaSim assumes everything on the command line (after 
    code
      | gov.velmasimulator.VelmaSimulatorCmdLine
      | ) that isn't identified as an option is a simulation configuration .xml file (even if it doesn't end in ".xml") The same error message occurs (less confusingly) for a command line with no options but two or more simulation configuration .xml files. So, when you see the "Multiple simulation configuration .xml files specified." failure message, but your command line only contains one .xml file, check any options for spelling errors.
  h4
    strong
      | Providing an invalid parameter key for a 
      code
        | --kv
        |  option
  p
    | VelmaSim also will not run when a 
    code
      | --kv
    |  option's fully-qualified parameter name is mispelled, or when that name does not exist in the specified simulation configuration.xml.
    br
    |  Here is an example with a slight misspelling ("propertie" instead of "properties"):
  pre
    code
      | >> PS C:\Users\meep> java -Xmx1g -cp C:\Users\meep\VELMA\JVelma.jar `
      | >> gov.epa.velmasimulator.VelmaSimulatorCmdLine `
      | >> C:Users\meep\VelmaConfigs\OR_BlueRiver_ws10.xml `
      | >> --kv="/calibration/VelmaInputs.propertie/run_index,new_be-OR_BlueRiver_ws10" `
      | >> --lint
      | >>
      | Applying: key=|/calibration/VelmaInputs.propertie/run_index| val=|new_be-OR_BlueRiver_ws10|
      | FAIL! exception="java.lang.NullPointerException"
      | FAIL! VELMA simulation run halted, configuration="C:Users\meep\VelmaConfigs\OR_BlueRiver_ws10.xml"
      | java.lang.NullPointerException
      |         at gov.epa.velmasimulator.SimulationConfiguration.setProperty(SimulationConfiguration.java:864)
      |         at gov.epa.velmasimulator.VelmaSimulatorCmdLine.main(VelmaSimulatorCmdLine.java:102)

  p
    | Unhelpfully, VelmaSim does not explicitly identify the problem as a misspelled parameter name, and a "java.lang.NullPointerException" can be caused by other errors.
    br
    |  However, when you see a FAIL! exception="java.lang.NullPointerException" message shortly after an "Applying: key=..." message, carefully check the spelling of that key name, and verify that it exists in the simulation configuration .xml file.
  h4
    strong
      | Omitting part of the full syntax for a 
      code
        | --kv
      |  option
  p
    | If you omit part of a 
    code
      | --kv
    |  option's syntax, VelmaSim 
    em
      | may or may not
    |  fail to run: what happens depends on what you omit.
    br
    |  Here is an example that is only missing the 
    code
      | <val>
    |  portion:
  pre
    code
      | >> PS C:\Users\meep> java -Xmx1g -cp C:\Users\meep\VELMA\JVelma.jar `
      | >> gov.epa.velmasimulator.VelmaSimulatorCmdLine `
      | >> C:Users\meep\VelmaConfigs\OR_BlueRiver_ws10.xml `
      | >> --kv="/calibration/VelmaCalibration.properties/be," `
      | >> --lint
      | Applying: key=|/calibration/VelmaCalibration.properties/be| val=||
      | VELMA LINTER: started at 2021-10-29 15:23:57
      | WARNING VelmaSimulatorEngine runLinter: VELMA Lint Mode Enabled: startups parameter suppressAllOutputFiles overridden and set == true
      | SEVERE GlobalState initializeCalibration: Model Calibration Initialization FAILED
      | SEVERE GlobalState initializeCalibration: Please check the status of the VelmaCalibration.properties file.
      | SEVERE GlobalState initializeCalibration: Exception was:
      | SEVERE GlobalState initializeCalibration: empty String
      | SEVERE VelmaSimulatorEngine initForSetup: FAIL! Cannot initialize Global State Object.
      | SEVERE VelmaSimulatorEngine runLinter: FAIL! The linter itself experienced an error: exception=java.lang.RuntimeException: FAIL! Cannot initialize Global State Object.
      | VELMA LINTER: done at 2021-10-29 15:23:57

  p
    | In this case, VelmaSim got to the comma separator after the (valid) 
    code
      | <key>
    |  and found an empty string 
    em
      | which it accepts as a parameter value
    | . But, when VelmaSim initialization code starts, it rejects the empty string as a value for the 
    code
      | be
    |  parameter, and at that point, and error occurs.
  p
    | In contrast, suppose the comma between the 
    code
      | <key>
    |  and 
    code
      | <val>
    |  is omitted:
  pre
    code
      | --kv="/calibration/VelmaCalibration.properties/be 2.5"

  p
    | You might expect that substituting this into the comand line above would produce a similar sort of error. In fact, it produces no error at all. Instead, VelmaSim takes this to mean you want to set a parameter with the short name "be 2.5" equal to "". The attempt fails, 
    em
      | but VelmaSim does not mention it
    | .
  p
    | Finally, suppose you forgot one of the paired double-quotes (typically, the right-side d-quote gets dropped). This situation is usually caught by PowerShell itself: it will won't consider your command line input complete until you add the missing double-quote. Pressing the Enter key in the meantime simply returns a new (
    code
      | >>
    | ) prompt.
  h4
    strong
      | Providing an invalid value for a 
      code
        | --kv
      |  option
  p
    | VelmaSim does not provide any special validation for the values specified in 
    code
      | --kv
    |  options. If you provide a valid parameter name, VelmaSim will replace that parameter's value with the value you specify regardless of how valid or appropriate it is for that parameter. Many invalid values are still caught just after the command line is processed, during initialization. (See the "Omitting part of the full syntax for a 
    code
      | --kv
    |  option above for an example.) Some of these will cause initialization to fail, but some will only incur a WARNING log message -- your simulation will still start, and will either crash or run to completion with invalid results.
    br
    |  Using the --lint option to check for this sort of situation is highly encouraged.